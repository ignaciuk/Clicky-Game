{"version":3,"sources":["components/Counter/index.js","components/Jumbotron/index.js","components/Footer/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","react_default","a","createElement","score","record","Example","Jumbotron","fluid","Container","className","children","components_Counter","Footer","href","title","target","rel","ImageCard","onClick","clickCount","id","Object","assign","src","image","alt","name","value","SweetAlert","withSwalInstance","swal","App","state","shapes","show","componentDidMount","_this","forEach","shape","count","gameOver","setState","find","o","i","sort","Math","random","_this2","this","components_Jumbotron","text","onConfirm","map","components_ImageCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50221f78.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Counter = (props) => {\n    return( \n        <div>\n            <h4>Current Streak: {props.score}</h4>\n            <h4>Record: {props.record}</h4>\n        </div>\n    );\n};\n\nexport default Counter","import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\nimport Counter from \"../Counter\";\n\nconst Example = (props) => {\n  return (\n    <div>\n      <Jumbotron fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">{props.children}</h1>\n          <p className=\"lead\">Try not to click the same shape twice.</p>\n          <Counter score={props.score} record={props.record}/>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Example;","import React from \"react\";\n\nconst Footer = (props) => {\n    return (\n        <div>\n            <div>Icons made by <a href=\"https://www.flaticon.com/authors/pixel-perfect\" title=\"Pixel perfect\">Pixel perfect</a> from <a href=\"https://www.flaticon.com/\" \t\t    title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" \t\t    title=\"Creative Commons BY 3.0\" target=\"_blank\" rel=\"noopener noreferrer\">CC 3.0 BY</a></div>\n        </div>\n    )\n};\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst ImageCard = (props) => {\n    return (\n        <div>\n            <div onClick={() => props.clickCount(props.id)} className=\"card\">\n                <div className=\"img-container\">\n                    <img  src={props.image} alt={props.name} value={props.id} {...props}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageCard;","import React, { Component } from 'react';\nimport './App.css';\nimport Example from \"./components/Jumbotron\";\n// import Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\";\nimport ImageCard from './components/ImageCard';\nimport shapes from \"./shapes.json\";\n// import AlertDismissable from \"./components/AlertDismissable\";\nimport { withSwalInstance } from 'sweetalert2-react';\nimport swal from 'sweetalert2';\n\nconst SweetAlert = withSwalInstance(swal);\n\nclass App extends Component {\n  state = {\n    shapes,\n    score: 0,\n    record: 0,\n    show: false\n  };\n\n  componentDidMount = () => {\n    this.state.shapes.forEach(shape => {\n      shape.count = 0;\n  });\n  }\n  \n  gameOver = () => {\n    if (this.state.score >= this.state.record) {\n      this.setState({record: this.state.score});\n    }\n    this.state.shapes.forEach(shape => {\n      shape.count = 0;\n    });\n    // alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0, show: true});\n    return true;\n  }\n  \n  clickCount = id => {\n    this.state.shapes.find((o, i) => {\n      if (o.id === id) {\n        if(shapes[i].count === 0){\n          shapes[i].count = shapes[i].count + 1;\n          this.setState({score : this.state.score + 1});\n          this.state.shapes.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Example score={this.state.score} record={this.state.record}>Clicky Game</Example>\n        {/* <AlertDismissable /> */}\n        {/* <Wrapper> */}\n      <SweetAlert\n        show={this.state.show}\n        title=\"Game over\"\n        text=\"Click OK to try again!\"\n        onConfirm={() => this.setState({ show: false })}\n      />\n        <div className=\"wrapper\">\n        {this.state.shapes.map(shape => (\n          <ImageCard\n            clickCount={this.clickCount}\n            key={shape.id}\n            id={shape.id}\n            name={shape.name}\n            image={shape.image}\n            value={shape.id}\n          />\n        ))}\n        </div>\n        {/* </Wrapper> */}\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}